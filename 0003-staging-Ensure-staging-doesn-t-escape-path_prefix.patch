From d5fae1953f248a9c9176149dd151f1839dd61213 Mon Sep 17 00:00:00 2001
From: William Douglas <william.douglas@intel.com>
Date: Fri, 25 Jan 2019 13:17:11 -0800
Subject: [PATCH] staging: Ensure staging doesn't escape path_prefix

Prevent content from being installed under the path_prefix by
validating the realpath of target files when staging file content.
---
 src/globals.c | 11 ++++++++++-
 src/staging.c | 16 ++++++++++++++++
 2 files changed, 26 insertions(+), 1 deletion(-)

diff --git a/src/globals.c b/src/globals.c
index 612fdef..75943c6 100644
--- a/src/globals.c
+++ b/src/globals.c
@@ -343,12 +343,13 @@ bool set_path_prefix(char *path)
 	if (path != NULL) {
 		int len;
 		char *tmp;
+		char real_path[PATH_MAX] = {0};
 
 		/* in case multiple -p options are passed */
 		free_string(&path_prefix);
 		string_or_die(&tmp, "%s", path);
 
-		/* ensure path_prefix is absolute, at least '/', ends in '/',
+		/* ensure path_prefix is fully resolved and at least ends in '/',
 		 * and is a valid dir */
 		if (tmp[0] != '/') {
 			char *cwd;
@@ -365,6 +366,14 @@ bool set_path_prefix(char *path)
 			free_string(&cwd);
 		}
 
+		if (!realpath(tmp, real_path)) {
+			fprintf(stderr, "Bad path_prefix %s (%s), cannot continue.\n",
+				path_prefix, strerror(errno));
+			return false;
+		}
+		free_string(&tmp);
+		string_or_die(&tmp, "%s/", real_path);
+
 		len = strlen(tmp);
 		if (!len || (tmp[len - 1] != '/')) {
 			char *tmp_old = tmp;
diff --git a/src/staging.c b/src/staging.c
index 7bbd7fc..b5ed17c 100644
--- a/src/staging.c
+++ b/src/staging.c
@@ -72,6 +72,7 @@ enum swupd_code do_staging(struct file *file, struct manifest *MoM)
 	char *targetpath = NULL;
 	char *rename_target = NULL;
 	char *rename_tmpdir = NULL;
+	char real_path[4096] = {0};
 	int ret;
 	struct stat s;
 
@@ -102,6 +103,21 @@ enum swupd_code do_staging(struct file *file, struct manifest *MoM)
 	} else if (!S_ISDIR(s.st_mode)) {
 		fprintf(stderr, "Error: Update target exists but is NOT a directory: %s\n", targetpath);
 	}
+	if (!realpath(targetpath, real_path)) {
+		ret = -1;
+		goto out;
+	} else if (strcmp(path_prefix, targetpath) !=0 &&
+		   strcmp(targetpath, real_path) != 0) {
+		/*
+		 * targetpath and real_path should always be equal but
+		 * in the case of the targetpath being the path_prefix
+		 * there is a trailing '/' in path_prefix but realpath
+		 * doesn't keep the trailing '/' so check for that case
+		 * specifically.
+		 */
+		ret = -1;
+		goto out;
+	}
 
 	free_string(&targetpath);
 	string_or_die(&target, "%s%s/.update.%s", path_prefix, rel_dir, base);
-- 
2.20.0

