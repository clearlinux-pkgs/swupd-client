commit 7a89a2c93969ebf0ae97d8d819ce6ac1931359e5
Author: Arjan van de Ven <arjan@linux.intel.com>
Date:   Mon Aug 1 17:28:29 2016 +0000

    Enable HTTP/2 protocol as option
    
    Allow curl to use the HTTP/2 protocol, with an automatic fallback to
    HTTP/1.1.
    Because of the optional nature, there's also no strict error handling
    performed, if requesting HTTP/2 fails it fails.... and we get HTTP/1.1.

diff --git a/src/curl.c b/src/curl.c
index 6b6099f..16f9b2f 100644
--- a/src/curl.c
+++ b/src/curl.c
@@ -480,6 +480,9 @@ CURLcode swupd_curl_set_basic_options(CURL *curl, const char *url)
 		goto exit;
 	}
 
+	curl_easy_setopt(curl, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_2_0);
+	curl_easy_setopt(curl, CURLOPT_PIPEWAIT, 1);
+
 	if (update_server_port > 0) {
 		curl_ret = curl_easy_setopt(curl, CURLOPT_PORT, update_server_port);
 		if (curl_ret != CURLE_OK) {
diff --git a/src/download.c b/src/download.c
index 9ea957d..4cae6fb 100644
--- a/src/download.c
+++ b/src/download.c
@@ -148,7 +148,7 @@ int start_full_download(bool pipelining)
 	 * is even more broken than average. This at least will allow the user to update, albeit slowly.
 	 */
 	if (pipelining) {
-		curl_multi_setopt(mcurl, CURLMOPT_PIPELINING, 1);
+		curl_multi_setopt(mcurl, CURLMOPT_PIPELINING, CURLPIPE_MULTIPLEX | CURLPIPE_HTTP1);
 	} else {
 		/* survival: don't go too parallel in verify/fix loop */
 		MAX_XFER = 1;
